{"version":3,"sources":["App.js","serviceWorker.js","Store/ReducerA.js","Store/ReducerB.js","index.js"],"names":["App","className","this","props","a","onClick","onUpdateA","b","onUpdateB","Component","connect","state","rA","rB","dispatch","type","value","Boolean","window","location","hostname","match","initialState","ReducerB","action","newState","ReducerA","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAKMA,E,iLACK,IAAD,OACR,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,oBAGA,kFACA,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,SAAQ,oCAAgBC,KAAKC,MAAMC,GACpD,4BAAQH,UAAU,MAAMI,QAAS,WAAK,EAAKF,MAAMG,UAAU,EAAKH,MAAMI,KAAtE,aAEG,yBAAKN,UAAU,OAChB,yBAAKA,UAAU,SAAQ,oCAAgBC,KAAKC,MAAMI,GACpD,4BAAQN,UAAU,MAAMI,QAAS,WAAK,EAAKF,MAAMK,UAAU,EAAKL,MAAMC,KAAtE,kB,GAdWK,aAkCHC,cAbQ,SAACC,GACtB,MAAM,CACJP,EAAEO,EAAMC,GAAGR,EACXG,EAAEI,EAAME,GAAGN,IAIY,SAACO,GAC1B,MAAM,CACJR,UAAU,SAACC,GAAD,OAAKO,EAAS,CAACC,KAAK,WAAWC,MAAMT,KAC/CC,UAAU,SAACJ,GAAD,OAAKU,EAAS,CAACC,KAAK,WAAYC,MAAMZ,OAGrCM,CAA6CV,GC3BxCiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qkBClBN,IAAMC,EAAa,CAClBlB,EAAE,GAkBYmB,EAdE,WAA+B,IAA9BZ,EAA6B,uDAAvBW,EAAcE,EAAS,uCACxCC,EAAS,EAAD,GAAMd,GACnB,OAAOa,EAAOT,MACd,IAAK,WACL,YAAUU,EAAV,CACArB,EAAEqB,EAASrB,EAAIoB,EAAOR,QAEvB,QACA,OAAOS,I,mjBCbR,IAAMH,EAAa,CAClBf,EAAE,GAkBYmB,EAdE,WAA+B,IAA9Bf,EAA6B,uDAAvBW,EAAcE,EAAS,uCACxCC,EAAS,KAAKd,GACnB,OAAOa,EAAOT,MACd,IAAK,WACL,YAAUU,EAAV,CACAlB,EAAEiB,EAAOR,MAAQS,EAASlB,IAE3B,QACA,OAAOkB,ICHFE,EAAcC,YAAgB,CAAChB,GAAGc,EAASb,GAAGU,IAC9CM,EAAQC,YAAYH,GAE1BI,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAAoBI,SAASC,eAAe,SHoH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fb24ac8d.chunk.js","sourcesContent":["\nimport React,{ Component} from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\n\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Multiple-Reducer\n      </header>\n      <h1>Click the button! it will add the value of A and B</h1>\n      <div className=\"col\">\n         <div className='heads'><span>A:</span>{this.props.a}</div>\n       <button className='btn' onClick={()=>{this.props.onUpdateA(this.props.b)}}>update A</button>\n       </div>\n          <div className=\"col\">\n         <div className='heads'><span>B:</span>{this.props.b}</div>\n       <button className='btn' onClick={()=>{this.props.onUpdateB(this.props.a)}}>update B</button>\n       </div>\n    </div>\n  );\n}\n}\n\nconst mapStateToProps =(state)=>{\n  return{\n    a:state.rA.a,\n    b:state.rB.b\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n  return{\n    onUpdateA:(b)=>dispatch({type:\"UPDATE_A\",value:b}),\n    onUpdateB:(a)=>dispatch({type:\"UPDATE_B\", value:a})\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps) (App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState={\n\ta:1\n}\n\n\nconst ReducerB = (state=initialState, action)=>{\n\tconst newState= {...state}\n\t\tswitch(action.type){\n\t\tcase 'UPDATE_A':\n\t\treturn{...newState,\n\t\ta:newState.a + action.value\n\t}\n\tdefault:\n\treturn newState;\n\t}\n   \n}\n\n\nexport default ReducerB;","const initialState={\n\tb:1\n}\n\n\nconst ReducerA = (state=initialState, action)=>{\n\tconst newState= {...state}\n\t\tswitch(action.type){\n\t\tcase 'UPDATE_B':\n\t\treturn{...newState,\n\t\tb:action.value + newState.b\n\t}\n\tdefault:\n\treturn newState;\n\t}\n   \n}\n\n\nexport default ReducerA;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers} from 'redux';\nimport ReducerA from './Store/ReducerA';\nimport ReducerB from './Store/ReducerB';\n\nconst rootReducer = combineReducers({rA:ReducerA,rB:ReducerB})\nconst store = createStore(rootReducer)\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}